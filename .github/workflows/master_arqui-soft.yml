name: Build and deploy WAR app to Azure Web App - Arqui-Soft

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'microsoft'

      # Descargar dependencias Jakarta
      - name: Download Jakarta Servlet API
        run: |
          mkdir -p lib
          wget -O lib/jakarta.servlet-api-5.0.0.jar https://repo1.maven.org/maven2/jakarta/servlet/jakarta.servlet-api/5.0.0/jakarta.servlet-api-5.0.0.jar

      # Preparar estructura de directorios
      - name: Prepare directory structure
        run: |
          mkdir -p build/classes
          mkdir -p build/web/WEB-INF/classes
          mkdir -p build/web/WEB-INF/lib
          mkdir -p dist
          # Crear web directory si no existe
          if [ ! -d "web" ]; then
            mkdir -p web/WEB-INF
            echo '<?xml version="1.0" encoding="UTF-8"?>' > web/WEB-INF/web.xml
            echo '<web-app xmlns="https://jakarta.ee/xml/ns/jakartaee" version="5.0">' >> web/WEB-INF/web.xml
            echo '</web-app>' >> web/WEB-INF/web.xml
          fi


      # Verificar estructura antes del build
      - name: Debug - List project structure
        run: |
          echo "=== Project structure ==="
          find . -type f -name "*.xml" | head -10
          echo "=== Source files ==="
          find src -name "*.java" | head -5 2>/dev/null || echo "No Java files found in src"
          echo "=== Lib directory ==="
          ls -la lib/ || echo "No lib directory"

      # Build con NetBeans Ant
      - name: Build with Ant (NetBeans project)
        run: |
          # Usar el path correcto para CopyLibs
          COPYLIBS_PATH="nbproject/lib/org-netbeans-modules-java-j2seproject-copylibstask.jar"
          
          echo "Building NetBeans project with CopyLibs..."
          echo "CopyLibs path: $COPYLIBS_PATH"
          
          # Construir con el path de CopyLibs
          ant -Dlibs.CopyLibs.classpath="$COPYLIBS_PATH" clean compile dist

      # Crear WAR si NetBeans no lo gener칩
      - name: Create WAR if needed
        run: |
          if [ ! -f dist/*.war ]; then
            echo "WAR file not found in dist/, creating manually..."
            mkdir -p temp-war/WEB-INF/classes
            mkdir -p temp-war/WEB-INF/lib
            mkdir -p dist
          
            # Copiar clases compiladas (NetBeans las pone en build/classes)
            if [ -d "build/classes" ]; then
              cp -r build/classes/* temp-war/WEB-INF/classes/ 2>/dev/null || echo "No compiled classes in build/classes"
            fi
          
            # Copiar archivos web
            if [ -d "web" ]; then
              cp -r web/* temp-war/ 2>/dev/null
            elif [ -d "src/main/webapp" ]; then
              cp -r src/main/webapp/* temp-war/ 2>/dev/null
            fi
          
            # Copiar dependencias
            if [ -d "lib" ]; then
              cp lib/*.jar temp-war/WEB-INF/lib/ 2>/dev/null || echo "No jar files in lib"
            fi
          
            # Crear web.xml b치sico si no existe
            if [ ! -f "temp-war/WEB-INF/web.xml" ]; then
              echo '<?xml version="1.0" encoding="UTF-8"?>' > temp-war/WEB-INF/web.xml
              echo '<web-app xmlns="https://jakarta.ee/xml/ns/jakartaee" version="5.0">' >> temp-war/WEB-INF/web.xml
              echo '  <display-name>Microservicio App</display-name>' >> temp-war/WEB-INF/web.xml
              echo '</web-app>' >> temp-war/WEB-INF/web.xml
            fi
          
            # Crear WAR
            cd temp-war
            jar -cvf ../dist/microservicio.war *
            cd ..
            echo "Created WAR file manually: dist/microservicio.war"
            ls -la dist/
          else
            echo "WAR file found in dist/"
            ls -la dist/*.war
          fi

      # Verificar que se gener칩 el WAR
      - name: Verify WAR creation
        run: |
          echo "=== Looking for WAR files ==="
          find . -name "*.war" -type f
          echo "=== Dist directory contents ==="
          ls -la dist/ || echo "No dist directory found"
          
          # Si no hay WAR en dist, buscarlo en otras ubicaciones comunes de NetBeans
          if [ ! -f dist/*.war ]; then
            echo "=== Searching for WAR in other NetBeans locations ==="
            find . -name "*.war" -type f 2>/dev/null || echo "No WAR files found anywhere"
          fi

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: java-app
          path: 'dist/*.war'  # Especificar ubicaci칩n exacta

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: java-app

      # Verificar artefacto descargado
      - name: Verify downloaded artifacts
        run: |
          echo "=== Downloaded files ==="
          ls -la
          find . -name "*.war" -type f

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_3DB6122B35454AB5A2007255B3F0D31F }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_AE7CBBE18FB84371A4CBD00589E39485 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_D4117EC42ACF46D894BBD1E827B9EFC8 }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'Arqui-Soft'
          slot-name: 'Production'
          package: '*.war'  # Buscar WAR en directorio actual